import unittest
from game.fibonacci import isFibonacci

# 10 very big Fibonacci numbers big_fib_{i} where i is the index in the Fibonacci sequence
# source https://fibonacci-calculator.netlify.app/
big_fib_1000 = 43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875
big_fib_2000 = 4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125
big_fib_5000 = 3878968454388325633701916308325905312082127714646245106160597214895550139044037097010822916462210669479293452858882973813483102008954982940361430156911478938364216563944106910214505634133706558656238254656700712525929903854933813928836378347518908762970712033337052923107693008518093849801803847813996748881765554653788291644268912980384613778969021502293082475666346224923071883324803280375039130352903304505842701147635242270210934637699104006714174883298422891491273104054328753298044273676822977244987749874555691907703880637046832794811358973739993110106219308149018570815397854379195305617510761053075688783766033667355445258844886241619210553457493675897849027988234351023599844663934853256411952221859563060475364645470760330902420806382584929156452876291575759142343809142302917491088984155209854432486594079793571316841692868039545309545388698114665082066862897420639323438488465240988742395873801976993820317174208932265468879364002630797780058759129671389634214252579116872755600360311370547754724604639987588046985178408674382863125
big_fib_10000 = 33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507665074611512677522748621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875
big_fib_12345 = 400805695072240470970514993214065752192289440772063392234116121035966330621821050108284603033716632771086638046166577665205834362327397885009536790892524821512145173749742393351263429067658996935575930135482780507243981402150702461932551227590433713277255705297537428017957026536279252053237729028633507123483103210846617774763936154673522664591736081039709294423865668046925492747583953758325850613548914282578320544573036249175099094644435323970587790740267131607004023987409385716162460955707793257532112771932704816713519196128834470721836094265012918046427449156654067195071358955104097973710150920536847877434256779886729555691213282504703193401739340461924048504866698176130757935914248753973087073009601101912877383634628929467608983980664185363370286731771712542583041365328648124549323878806758395652340861186334027392307091079257180835672989798524084534677252369585918458720952520972332496025465803523315515681084895362126005441170936820059518262349022456888758938672920855739736423917065122816343192172271301981007636070751378441363091187289522144227851382197807194256392294919912037019476582418451273767976783751999133072126657949249799858935787018952232743400610036315564885371356712960608966755186612620425868892621106627825137425386831657368826398245606147944273998498356443362170133234924531673939303668042878258282104212769625245680321344034442698232414181912301904509531018692483863038992377680591406376081935756597411807864832452421993121459549055042253305545594009110753730302061881025182053074077930494574304284381890534053065639084253641881363463311184024281835265103884539012874542416238100890688593076189105555658375552988619203325356676814545718066196038345684671830102920209857682912971565838896011294918349088792184108318689299230788355618638040186790724351073650210514429114905535411044888774713860041341593318365792673354888566799196442017231870631867558530906286613228902689695061557951752309687806567573290910909535395758148994377158637050112347651517847188123790794231572729345617619677555583207012253101701328971768827861922408064379891201972881554890367344239218306050355964382953279316318309272212482218232309006973312977359562553184608144571713073802285675503209229581312057259729362382786183100343961484090866057560474044189870633912200595478051573769889968342203512550302655117491740823696686983281784153050366346823513213598551985596176977626982962058849363351794302206703907577970065793839511591930741441079234179943480206539767561244271325923343752071038968002157889912694947204003637791271084190929058369801531787887444598295425899927970
big_fib_29999 = 117688724747832811967385125148171242468688889028750973063621267783779753995510660242051872945165743898909651610875234970153106132755165987826946076369266062850503559593819918763456756205915878958264333721056966862918386969250515556522001081446181485565478609441465505725916105827715668967148239216930996387997372106257480066587218231234277340975679164355126125434188680691759557920742250360524610895857586693326892352764840534980504698091646987350892630396109787893801010400171912127008758376868153703432510210993505413724984090636202427212877358360982426544258460630832029746155568008259515952796760768671539856318639363719769984595293604556081431356240438937814727441491303072801730986521422272543234262341372074508902321923865362769921504602974294258650203565758155169262936302700285562712953804407439470037467119534478339618817279072010994706405237455718382235484197670998003874869226180965290868502235505498794995069884529619542902615313021538740633291945361654930364657467043433435063138663205401059562854181889024766552756525265215605746421439247515174249515832287328647988224888069586927342926241751157235580569455059445921245078378281451100039620307287486088833023922940030929806107938253078681894286839419902230453518568846876593477539510387161121741975642432788661766790583126435344416610029013722405471247687302416553525853833836810514435680379616294818980885974524863505871476403737715145434500395754541486284242857112537877503547945036364676999983865947834534503602810173798593401186283413973077490481831695148939436615774642234888024666018686682338207500257303814756242242287271595991113893051868191227965248563195896320891237396357152698653654744810719241050714703715928124139647658728975313985943325639422148216326365141003130737069799007262735707115290156515503129635607782753753075651783052822607678875520642918063886690884314958663589687402544576489564536163900001254418983229028122231776252213317314308087366883182460330050349016402826853519646953816938278626377694085011836415257562431887639321441657426153607960998468419749177140973743852243948763402541219409837169549212210364199039788892582690571838347533772524076773292737932594854544857794399687430073850159936920943410840926117536355308664977220174869471923500297588403012417248252812013812064238831260863336107864413555737890834743640449525109155197122992409876634490134137677711765776438227455788124001892504608308251203118538018444361582874327565746709959884042752718716008742568113605127801884324372775820500502664524303204748572171459603066241174830372152067327917079746773657390724901506840689305658249085809939340897739831117656029751612419360527908561606534928835106972869622885718341486874571931753863762989761523505576552314501613325590099917297240853302781936066495455155185468890810410819038247110183733323223381754164705453930152461255029477660138293970959479446993036570304474336857487109155508955597767309186045120882323863548313924345764319748641084554704331369385899809867581906936637641030043134394471896671079341441460092716194186832882700541209535955236944600874745676754636007057985384361518930137664026304652689311871395195523946801845369985502937527029820031080213244059383545434685365103180176461394314565544495738873352996714830890869987005462309585088940678399817353691039090874121944849595248058799865242644379234914167914079909851440022931866027252287445867122177477080116667870221554380947088319086666391397633137323584247336990745637772091047946734598472364827758276845775859207744265256538072014282537212836636668568033304933785641864781150757452257707468286068107607674331561731861647705557864969738925906083545412011314201745189431765411228700006300554203055796986931618058174030622997130635985573444925616637585783996064214428290313278198575069051680908748794605580279603026510671498869973973911261069347267495653567284600585499660868536185225709998969881781178510995149998859207863270792678930095587919903919707140104302504171158887888139005690772077436900269333143049401233904099485279938907318909933745826557749787844273083818309115200894335137875254745214302307763780550185481966334232013899128727098893136244401314763835260724272877858159090643676044739101877023969823519879777473950642609775151925719140509843438486615541509697002714065790486583112398110715243243027771489761611777046269879129098951149568962443588357794250723694855643653146522164207178935294063397840280712960478871562985508543682268008276814000887143879655867852280114927236755273146771942678778797837538003279039831695917223780408444168815697533553152924118606443890057516374581141135165281812052426463877304198815438705873706373478460138188437489210376850638921025685147167673857777369168636538367362032144700406343910316261227085360582945047282284031046575830765950888193336123487194683155239426756583405592844049551629850681835969346509882385319112522584061086590775978443751782628451475366838774192882025193649119029384107987385723321774351036029748272723555041012866561771401720991748380775778202976190762417675967825761647111675753680474902363239915272749139222625846984552886348059090618179314032309202453722432923417003857603559465792370372361868599575304854384518407257293490798407259221608683058759550916023124612821669796148451974663231161690757741046561148340082961886568005763812652392818577651177608748196527824492279328269064640389592073197136274613796767938699106030989614179309886275584464146347433175818261553626917339269345893015578086644146695449223237688766226243210145085505319412760917207629526767641480494797414775786699114466038132869843106465292309652011936602281114550014336446750668233003882020798158100947417900626604670287705218323380945456035520640800912393150989800827236055280094643831705046633873286329255566777066001224260558911644467013420336382456572236173117435475902642610427726996567791666721595634573960056803428569017569845193040245999932688792753091330774186541597428487954481166916619190520642248349121941543514255443567409204498358775697913489795328709138225533981381485707590310299726010360775333343734091253981880146204653182389355205470604932791482179881313992740725584148747124628341192605215827881221504241408893183319899569237282203995859688433815457898354741531325891137026913439438748814907920314934934118731209514925917451020001
big_fib_30000 = 190424356734624387485009768471757502894402291602333519273391184052044801863340156450551433982614963137464626804144068885630838500556036577403106197181989289479297141433926114690246564834493082628835531989332440953142111541549920917976020744635281408398688209952783539056482888371523133730274288541852404137830277112866337579693720409087652107913013085800297115487624490823010059245505107399217576190465207585654967892214794886667550037433102336577854685811722905941067193238224884269394952826248638798048234335803688651014213948200751529795496837923745773937393225342531979064080528356666322945947462315826624714006444135626792549585770249106660715795233034514509461462571047476804947095353038731709413604410706082989735571615761791544525979791564231042162639574649793913847950777768022209032805074411739963820433355637183397460799929108660649155753351040248072457511184392614659387374354009064529212219501820808022224254959797983601555439255069670151995180872853245933831067681253893045200748122909177621618865888274982806108108224652705835631654618703320067668928532890641087168310033731402794698735157919378188133117306315981822841850882715676881459373523010452359757757730209430432193850558609774837584057102906893248272322647117645350723205244607943101821181235968602368736523115058668053371939887711901192490071469480182692668908396707634284398037976199972774950371867093141630250025179315701897463715355833381673110697144421175942492053350710561560219468751250798525270256923881492157388526784143110541346731890547564173293438356270080974640907771615944252314476282445381552354798234842808282112001233648009210548599128260379934163713312193208028778706216522742740555896102830298548031740835447247185378992412360954041922790202724474186846793702274025286479940250746228989799760200501884172400228416272067282683327140319184259264567359928853332310617107287488263439326591202485986243280919771118019129447664771514479467005605463310729390893001119407263077036144375706590024849036879329868026084712649637876873465378679900761787541029475703116034691556396562517413773705279395762047610627787872041476180921172984503307343624247275269298669905791091608330882831729028794049245520533416768710205644289656251977864757141787227909245022543090360998461125360545914720323286101975646120827217807449905283159660498495737216937925224220925817959646865654341315419861401742940297128699298628549773684247168778400114516719135300030465459498197355414069746442405484242231685101290717946738543535232619783031259290155129893655271487991702577847512813368752238721137750254383500690621952746226033968997813655493488645714975514788781189046117024617504325310882043767959380975673177274926359358292583654087983221920870077293934239875827463518298300942513479387350032283409586344276466908401612103761669386292569985263915582316337667226479966822531017127262124126242350220520835808782073624952856090753701759509362092032963961331581008568304021317953766850347395116832689445760107136540814214021392404331241763385641167816727186602042434105781074483509223829114227763925966048436133632490969766152896055605048885766796378949073212628193430640740722928528100087350301663849955836083115750038383639292896952773844600095242336452075010729083392972075428177061684951048637714304066297658482543321955286005976030968204370095181702023363402031555321652538677931433797795401396861562539451022181528705363045189154505059528166314746755476011502487747441326009682051775694205211854088167708379369293978758459025563989045517647986934579669972224114107933225786692466049301817169379971620339839705156808894916340154157067206340177881597910394919836923122883469956566283272814177296166201508576234985105669894997329655018310680772846362425663316486101542675221749699569756256414329609774304473863523018058643347466267279990063474997818081994546317355545376345017663336649755874465027863368151754962824865790006195662871485300310860288324611834283267430677264487885244717947323119237199196575647336666357369141659555194142778108151847393235436240183532300639063155468238991712663011603170576591595571472664751062871528963747411528273406047499766374450194365508838171233663717001518338235490852659746921711080155345457927795998493532623893994956972009135169184397320002286945702914321715935739878525208208926296431939949307171349220082594079093553686881433959608920728155807806445035918273722100029648066756039578772515917074527634886032362827338065671597516767911566209444110736807723932393404714106562911761174190456599929671153552179790485011049416098007721734896839029450954557040990787648344612444964092277139936667125920738271902097280442646213007400968800247071757369239144614535293019108236469601396923710806931557364306146641996071933792057608797017958975870495071669538215660519182352267182748664955758923371252361232661690778196233292135432281281858129802490984637885390804066881313464757088720129643942223705209407348890279806411293021285650246143136205562597658500036439996546162852139696666619638978247206779718435967985886095207170416209049674095505101089710995116035722625784281756648089404646506307276336983902192498380778218707838355103668676663461089084712628173914937789814682329298963003642066141999438040852852926088411154831459916879782478335187037234813360178749565388366838026197749656764142432095580920896695578491964252987317907494476456394780643926219675584551971130668497373771104297328252823720093716844106963944194302994447147982855630995491840181531036229308675675065396576250219949429658523027680054153789230319144564667429507895449704352702106699199775945380718822402982347784833335802479031399900713096525397292042172338790454227446834531599850745011939275745068233867551394685972855095171036582140355723560536009040573497122931318666092407244907750182876961042338799663939805503533637073908215976861289581036287788014438378143797673135789533379021182720664243998022495426262498385471169771002394605640491051778090803632911801452749770546566201976833843783851372376164467387704539821085375293220018508867444967714951415100256569191282869896229350884942425184141898975551306147830326257128149637401473862981964515934107227978070596801874656899801671675793185108559480939632054408671933601514519496788580844086469519287684603973247694790730821810443367097960000



class FibonacciTestCase(unittest.TestCase):
    """Test game.fibonacci.isFibonacci"""
    
    def test_first_1000_numbers(self):
        """Tests that the isFibonacci() returns the correct values for number between 0 and 1000 (inclusive)"""

        # fibonacci numbers between 0 and 999 (inclusive)
        fib_numbers = set([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987])
        expected_is_fibonacci = [n in fib_numbers for n in range(1000)]
        actual_is_fibonacci = [isFibonacci(n) for n in range(1000)]
        self.assertEqual(actual_is_fibonacci,expected_is_fibonacci)

    def test_first_100_fib_numbers(self):
        """Test that the first 100 numbers in the Fibonacci sequence are correctly identified"""

        self.assertTrue(isFibonacci(0))
        self.assertTrue(isFibonacci(1))
        self.assertTrue(isFibonacci(1))
        self.assertTrue(isFibonacci(2))
        self.assertTrue(isFibonacci(3))
        self.assertTrue(isFibonacci(5))
        self.assertTrue(isFibonacci(8))
        self.assertTrue(isFibonacci(13))
        self.assertTrue(isFibonacci(21))
        self.assertTrue(isFibonacci(34))
        self.assertTrue(isFibonacci(55))
        self.assertTrue(isFibonacci(89))
        self.assertTrue(isFibonacci(144))
        self.assertTrue(isFibonacci(233))
        self.assertTrue(isFibonacci(377))
        self.assertTrue(isFibonacci(610))
        self.assertTrue(isFibonacci(987))
        self.assertTrue(isFibonacci(1597))
        self.assertTrue(isFibonacci(2584))
        self.assertTrue(isFibonacci(4181))
        self.assertTrue(isFibonacci(6765))
        self.assertTrue(isFibonacci(10946))
        self.assertTrue(isFibonacci(17711))
        self.assertTrue(isFibonacci(28657))
        self.assertTrue(isFibonacci(46368))
        self.assertTrue(isFibonacci(75025))
        self.assertTrue(isFibonacci(121393))
        self.assertTrue(isFibonacci(196418))
        self.assertTrue(isFibonacci(317811))
        self.assertTrue(isFibonacci(514229))
        self.assertTrue(isFibonacci(832040))
        self.assertTrue(isFibonacci(1346269))
        self.assertTrue(isFibonacci(2178309))
        self.assertTrue(isFibonacci(3524578))
        self.assertTrue(isFibonacci(5702887))
        self.assertTrue(isFibonacci(9227465))
        self.assertTrue(isFibonacci(14930352))
        self.assertTrue(isFibonacci(24157817))
        self.assertTrue(isFibonacci(39088169))
        self.assertTrue(isFibonacci(63245986))
        self.assertTrue(isFibonacci(102334155))
        self.assertTrue(isFibonacci(165580141))
        self.assertTrue(isFibonacci(267914296))
        self.assertTrue(isFibonacci(433494437))
        self.assertTrue(isFibonacci(701408733))
        self.assertTrue(isFibonacci(1134903170))
        self.assertTrue(isFibonacci(1836311903))
        self.assertTrue(isFibonacci(2971215073))
        self.assertTrue(isFibonacci(4807526976))
        self.assertTrue(isFibonacci(7778742049))
        self.assertTrue(isFibonacci(12586269025))
        self.assertTrue(isFibonacci(20365011074))
        self.assertTrue(isFibonacci(32951280099))
        self.assertTrue(isFibonacci(53316291173))
        self.assertTrue(isFibonacci(86267571272))
        self.assertTrue(isFibonacci(139583862445))
        self.assertTrue(isFibonacci(225851433717))
        self.assertTrue(isFibonacci(365435296162))
        self.assertTrue(isFibonacci(591286729879))
        self.assertTrue(isFibonacci(956722026041))
        self.assertTrue(isFibonacci(1548008755920))
        self.assertTrue(isFibonacci(2504730781961))
        self.assertTrue(isFibonacci(4052739537881))
        self.assertTrue(isFibonacci(6557470319842))
        self.assertTrue(isFibonacci(10610209857723))
        self.assertTrue(isFibonacci(17167680177565))
        self.assertTrue(isFibonacci(27777890035288))
        self.assertTrue(isFibonacci(44945570212853))
        self.assertTrue(isFibonacci(72723460248141))
        self.assertTrue(isFibonacci(117669030460994))
        self.assertTrue(isFibonacci(190392490709135))
        self.assertTrue(isFibonacci(308061521170129))
        self.assertTrue(isFibonacci(498454011879264))
        self.assertTrue(isFibonacci(806515533049393))
        self.assertTrue(isFibonacci(1304969544928657))
        self.assertTrue(isFibonacci(2111485077978050))
        self.assertTrue(isFibonacci(3416454622906707))
        self.assertTrue(isFibonacci(5527939700884757))
        self.assertTrue(isFibonacci(8944394323791464))
        self.assertTrue(isFibonacci(14472334024676221))
        self.assertTrue(isFibonacci(23416728348467685))
        self.assertTrue(isFibonacci(37889062373143906))
        self.assertTrue(isFibonacci(61305790721611591))
        self.assertTrue(isFibonacci(99194853094755497))
        self.assertTrue(isFibonacci(160500643816367088))
        self.assertTrue(isFibonacci(259695496911122585))
        self.assertTrue(isFibonacci(420196140727489673))
        self.assertTrue(isFibonacci(679891637638612258))
        self.assertTrue(isFibonacci(1100087778366101931))
        self.assertTrue(isFibonacci(1779979416004714189))
        self.assertTrue(isFibonacci(2880067194370816120))
        self.assertTrue(isFibonacci(4660046610375530309))
        self.assertTrue(isFibonacci(7540113804746346429))
        self.assertTrue(isFibonacci(12200160415121876738))
        self.assertTrue(isFibonacci(19740274219868223167))
        self.assertTrue(isFibonacci(31940434634990099905))
        self.assertTrue(isFibonacci(51680708854858323072))
        self.assertTrue(isFibonacci(83621143489848422977))
        self.assertTrue(isFibonacci(135301852344706746049))
        self.assertTrue(isFibonacci(218922995834555169026))

    def test_big_fib_numbers(self):
        """Test some very large Fibonacci numbers"""
        
        self.assertTrue(isFibonacci(big_fib_1000))
        self.assertTrue(isFibonacci(big_fib_2000))
        self.assertTrue(isFibonacci(big_fib_5000))
        self.assertTrue(isFibonacci(big_fib_10000))
        self.assertTrue(isFibonacci(big_fib_12345))
        self.assertTrue(isFibonacci(big_fib_29999))
        self.assertTrue(isFibonacci(big_fib_30000))
    
    def test_big_non_fib_numbers(self):
        """Test some very large non-Fibonacci numbers"""

        self.assertFalse(isFibonacci(big_fib_1000-1))
        self.assertFalse(isFibonacci(big_fib_1000+1))
        self.assertFalse(isFibonacci(big_fib_2000-1))
        self.assertFalse(isFibonacci(big_fib_2000+1))
        self.assertFalse(isFibonacci(big_fib_5000-1))
        self.assertFalse(isFibonacci(big_fib_5000+1))
        self.assertFalse(isFibonacci(big_fib_10000-1))
        self.assertFalse(isFibonacci(big_fib_10000+1))
        self.assertFalse(isFibonacci(big_fib_12345-1))
        self.assertFalse(isFibonacci(big_fib_12345+1))
        self.assertFalse(isFibonacci(big_fib_29999-1))
        self.assertFalse(isFibonacci(big_fib_29999+1))
        self.assertFalse(isFibonacci(big_fib_30000-1))
        self.assertFalse(isFibonacci(big_fib_30000+1))

    def test_unexpected_values(self):
        """Test some unexpected values"""
        
        with self.assertRaises(TypeError):
            isFibonacci(None)
        
        with self.assertRaises(TypeError):
            isFibonacci('1')
        
        with self.assertRaises(TypeError):
            isFibonacci('A')
        
        with self.assertRaises(TypeError):
            isFibonacci([])
        
        with self.assertRaises(TypeError):
            isFibonacci(())
        
        with self.assertRaises(TypeError):
            isFibonacci({})
        
        with self.assertRaises(TypeError):
            isFibonacci(0.0)
        
        with self.assertRaises(TypeError):
            isFibonacci(0.5)
        
        with self.assertRaises(TypeError):
            isFibonacci(-1.5)
    
    def test_negative_numbers(self):
        """Test negative values"""

        with self.assertRaises(ValueError):
            isFibonacci(-1)

        with self.assertRaises(ValueError):
            isFibonacci(-10)

        with self.assertRaises(ValueError):
            isFibonacci(-10000)



if __name__ == '__main__':
    unittest.main()